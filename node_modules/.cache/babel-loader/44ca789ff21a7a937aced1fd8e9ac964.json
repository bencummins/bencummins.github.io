{"ast":null,"code":"import _defineProperty from \"/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/app/src/components/GameBoard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\nvar GameBoard = function GameBoard(_ref) {\n  var haveTurn = _ref.haveTurn,\n      gameState = _ref.gameState,\n      setGameState = _ref.setGameState,\n      currentResult = _ref.currentResult,\n      setCurrentResult = _ref.setCurrentResult,\n      targetResult = _ref.targetResult,\n      setTargetResult = _ref.setTargetResult,\n      buttons = _ref.buttons,\n      setButtons = _ref.setButtons,\n      takenTurns = _ref.takenTurns,\n      setTakenTurns = _ref.setTakenTurns,\n      currentTurns = _ref.currentTurns,\n      setCurrentTurns = _ref.setCurrentTurns,\n      maxTurns = _ref.maxTurns,\n      setMaxTurns = _ref.setMaxTurns,\n      startValue = _ref.startValue,\n      setStartValue = _ref.setStartValue;\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(function () {\n    // Update the document title using the browser API\n    currentTurns === maxTurns && setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n  });\n\n  var initialiseGame = function initialiseGame() {\n    setCurrentTurns(0);\n    var startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n    var i = 0; // failsafe\n\n    var new_buttons = []; // get random number of possible buttons\n\n    var limit = Math.floor(Math.random() * limitButtons) + 2;\n\n    var _loop = function _loop() {\n      var tmp = getButton(i); // don't include the same button twice\n\n      if (new_buttons.find(function (button) {\n        return button.hash === tmp.hash;\n      })) {\n        return \"continue\";\n      }\n\n      new_buttons = [].concat(_toConsumableArray(new_buttons), [tmp]);\n    };\n\n    while (new_buttons.length < limit && i++ < 100) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    } // store new buttons\n\n\n    setButtons(new_buttons); // generate some turns     \n\n    var newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    i = 0; // failsafe\n\n    var turns = [];\n\n    while (turns.length < newMaxTurns && i++ < 100) {\n      var button = new_buttons[~~(new_buttons.length * Math.random())]; // can we use this button with the 'current result' ?\n\n      var possible = button.possible(targetResult);\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible); // if we can't take the action, don't use button\n\n      if (!possible) continue;\n      turns = [].concat(_toConsumableArray(turns), [button]);\n      setTargetResult(button.getNextResult);\n    } // store the turns that were taken to get to the result (cheat mode)\n\n\n    setTakenTurns(turns);\n    setGameState(\"ready\");\n  };\n\n  var resetGame = function resetGame() {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  var getButton = function getButton(j) {\n    var NewButton = possible_buttons[~~(possible_buttons.length * Math.random())];\n    return NewButton();\n  };\n\n  gameState === \"init\" && initialiseGame(); // setButtons([...buttons, <AddButton />]);\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return React.createElement(GameContext.Provider, {\n    value: {\n      buttons: buttons,\n      currentResult: currentResult,\n      setCurrentResult: setCurrentResult,\n      targetResult: targetResult,\n      maxTurns: maxTurns,\n      currentTurns: currentTurns,\n      gameState: gameState,\n      haveTurn: haveTurn,\n      initialiseGame: initialiseGame,\n      resetGame: resetGame,\n      takenTurns: takenTurns\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"gameboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(GameStatus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(Display, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(Buttons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(Cheat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })));\n};\n\nvar GameBoardContainer = function GameBoardContainer(props) {\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameState = _useState2[0],\n      setGameState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttons = _useState4[0],\n      setButtons = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      takenTurns = _useState6[0],\n      setTakenTurns = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentResult = _useState8[0],\n      setCurrentResult = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      targetResult = _useState10[0],\n      setTargetResult = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      maxTurns = _useState12[0],\n      setMaxTurns = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      currentTurns = _useState14[0],\n      setCurrentTurns = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      startValue = _useState16[0],\n      setStartValue = _useState16[1];\n\n  var haveTurn = function haveTurn(action) {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  }; //   const targetTurn = action => setTargetResult(action);\n\n\n  var possible_buttons = [AddAction, AppendAction, SubtractAction, ReverseAction, SumAction, MultiplyAction, DivideAction];\n  var limitTurns = 5;\n  var limitButtons = 5;\n  React.createElement(GameContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, function (_ref2) {\n    var _React$createElement;\n\n    var haveTurn = _ref2.haveTurn,\n        gameState = _ref2.gameState,\n        setGameState = _ref2.setGameState,\n        currentResult = _ref2.currentResult,\n        setCurrentResult = _ref2.setCurrentResult,\n        targetResult = _ref2.targetResult,\n        setTargetResult = _ref2.setTargetResult,\n        buttons = _ref2.buttons,\n        setButtons = _ref2.setButtons,\n        takenTurns = _ref2.takenTurns,\n        setTakenTurns = _ref2.setTakenTurns,\n        currentTurns = _ref2.currentTurns,\n        setCurrentTurns = _ref2.setCurrentTurns;\n    return React.createElement(GameBoard, (_React$createElement = {\n      haveTurn: haveTurn,\n      gameState: gameState,\n      setGameState: setGameState,\n      currentResult: currentResult,\n      setCurentResult: setCurrentResult,\n      setCurrentTurns: setCurrentTurns,\n      targetResult: targetResult,\n      setTargetResult: setTargetResult,\n      buttons: buttons,\n      setButtons: setButtons,\n      takenTurns: takenTurns,\n      setTakenTurns: setTakenTurns,\n      currentTurns: currentTurns\n    }, _defineProperty(_React$createElement, \"setCurrentTurns\", setCurrentTurns), _defineProperty(_React$createElement, \"__source\", {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement));\n  });\n};\n\nexport default GameBoardContainer;","map":{"version":3,"sources":["/app/src/components/GameBoard.js"],"names":["React","useState","useEffect","GameContext","Display","GameStatus","Cheat","Buttons","AppendAction","AddAction","SubtractAction","DivideAction","MultiplyAction","ReverseAction","SumAction","GameBoard","haveTurn","gameState","setGameState","currentResult","setCurrentResult","targetResult","setTargetResult","buttons","setButtons","takenTurns","setTakenTurns","currentTurns","setCurrentTurns","maxTurns","setMaxTurns","startValue","setStartValue","initialiseGame","startingValue","Math","floor","random","i","new_buttons","limit","limitButtons","tmp","getButton","find","button","hash","length","newMaxTurns","limitTurns","turns","possible","console","log","getNextResult","resetGame","j","NewButton","possible_buttons","GameBoardContainer","props","action"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\n\n\nconst GameBoard = ({\n  haveTurn, \n  gameState,setGameState,\n  currentResult, setCurrentResult,\n  targetResult, setTargetResult,\n  buttons, setButtons,\n  takenTurns, setTakenTurns,\n  currentTurns, setCurrentTurns,\nmaxTurns,setMaxTurns,\nstartValue, setStartValue,\n\n}) => {\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    currentTurns === maxTurns &&\n      setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n  });\n\n\n  const initialiseGame = () => {\n\n    setCurrentTurns(0);\n\n    const startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue)\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n\n    let i = 0; // failsafe\n    let new_buttons = [];\n    \n    // get random number of possible buttons\n    let limit = Math.floor(Math.random() * limitButtons) + 2;\n    while (new_buttons.length < limit && i++ < 100) {\n      let tmp = getButton(i);\n      \n      // don't include the same button twice\n      if (new_buttons.find(button => button.hash === tmp.hash)) {\n          continue;\n      }\n      \n      new_buttons = [...new_buttons, tmp];\n    }\n    // store new buttons\n    setButtons(new_buttons);\n    \n    // generate some turns     \n    const newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n\n    i = 0; // failsafe\n    let turns = [];\n    while (turns.length < newMaxTurns && i++ < 100) {\n      let button = new_buttons[~~(new_buttons.length * Math.random())];\n      \n      // can we use this button with the 'current result' ?\n      let possible = button.possible(targetResult)\n\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible)\n\n      // if we can't take the action, don't use button\n      if (!possible) continue;\n\n      \n      turns = [...turns, button]\n\n      setTargetResult(button.getNextResult)\n    }\n\n    // store the turns that were taken to get to the result (cheat mode)\n    setTakenTurns(turns);\n    \n\n    setGameState(\"ready\");\n\n  };\n\n  const resetGame = () => {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  const getButton = j => {\n    let NewButton =\n      possible_buttons[~~(possible_buttons.length * Math.random())];\n\n    return NewButton();\n  };\n\n  gameState === \"init\" && initialiseGame();\n\n  // setButtons([...buttons, <AddButton />]);\n\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return (\n    <GameContext.Provider\n      value={{\n        buttons,\n        currentResult,\n        setCurrentResult,\n        targetResult,\n        maxTurns,\n        currentTurns,\n        gameState,\n        haveTurn,\n        initialiseGame,\n        resetGame,\n        takenTurns\n      }}\n    >\n      <div className={\"gameboard\"}>\n        <GameStatus />\n        <Display />\n        <Buttons />\n        <Cheat />\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nconst GameBoardContainer = props => {\n  const [gameState, setGameState] = useState(\"init\");\n\n  const [buttons, setButtons] = useState([]);\n  const [takenTurns, setTakenTurns] = useState([]);\n\n  const [currentResult, setCurrentResult] = useState(0);\n\n  const [targetResult, setTargetResult] = useState(0);\n  const [maxTurns, setMaxTurns] = useState(0);\n\n  const [currentTurns, setCurrentTurns] = useState(0);\n\n  const [startValue, setStartValue] = useState(0);\n\n  const haveTurn = action => {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  };\n\n//   const targetTurn = action => setTargetResult(action);\n  \n\n\n  const possible_buttons = [\n    AddAction,\n    AppendAction,\n    SubtractAction,\n    ReverseAction,\n    SumAction,\n    MultiplyAction,\n    DivideAction\n  ];\n\n  const limitTurns = 5;\n  const limitButtons = 5;\n  \n  \n  <GameContext.Consumer>\n  {({ \n    haveTurn, \n    gameState,setGameState,\n    currentResult, setCurrentResult,\n    targetResult, setTargetResult,\n    buttons, setButtons,\n    takenTurns, setTakenTurns,\n    currentTurns, setCurrentTurns\n\n\n  \n  }) => <GameBoard \n  haveTurn={haveTurn}\n  gameState={gameState}\n  setGameState={setGameState}\n  currentResult={currentResult}\n  setCurentResult={setCurrentResult}\n  \n  setCurrentTurns={setCurrentTurns}\n  targetResult={targetResult}\n  setTargetResult={setTargetResult}\n  buttons={buttons}\n  setButtons={setButtons}\n  takenTurns={takenTurns}\n  setTakenTurns={setTakenTurns}\n  currentTurns={currentTurns}\n  setCurrentTurns={setCurrentTurns}\n   />}\n</GameContext.Consumer>  \n}\n\nexport default GameBoardContainer;\n"]},"metadata":{},"sourceType":"module"}