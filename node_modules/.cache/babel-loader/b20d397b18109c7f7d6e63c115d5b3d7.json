{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/app/src/components/GameBoard.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\nvar GameBoard = function GameBoard() {\n  var _useContext = useContext(GameContext),\n      gameState = _useContext.gameState,\n      setGameState = _useContext.setGameState,\n      setCurrentResult = _useContext.setCurrentResult,\n      targetResult = _useContext.targetResult,\n      setTargetResult = _useContext.setTargetResult,\n      setButtons = _useContext.setButtons,\n      setTakenTurns = _useContext.setTakenTurns,\n      setCurrentTurns = _useContext.setCurrentTurns,\n      setMaxTurns = _useContext.setMaxTurns,\n      setStartValue = _useContext.setStartValue,\n      limitButtons = _useContext.limitButtons,\n      limitTurns = _useContext.limitTurns; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    // currentTurns === maxTurns &&\n    //   setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n    console.log(\"gameState\", gameState);\n  });\n  var possible_buttons = [AddAction, AppendAction, SubtractAction, ReverseAction, SumAction, MultiplyAction, DivideAction];\n\n  var getButton = function getButton(j) {\n    var NewButton = possible_buttons[~~(possible_buttons.length * Math.random())];\n    return NewButton();\n  };\n\n  var initialiseGame = function initialiseGame() {\n    setCurrentTurns(0);\n    var startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n    var i = 0; // failsafe\n\n    var new_buttons = []; // get random number of possible buttons\n\n    var limit = Math.floor(Math.random() * limitButtons) + 2;\n\n    var _loop = function _loop() {\n      var tmp = getButton(i); // don't include the same button twice\n\n      if (new_buttons.find(function (button) {\n        return button.hash === tmp.hash;\n      })) {\n        return \"continue\";\n      }\n\n      new_buttons = [].concat(_toConsumableArray(new_buttons), [tmp]);\n    };\n\n    while (new_buttons.length < limit && i++ < 100) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n\n    console.log(\"new_buttons\", new_buttons); // store new buttons\n\n    setButtons(new_buttons); // generate some turns     \n\n    var newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    i = 0; // failsafe\n\n    var turns = [];\n\n    while (turns.length < newMaxTurns && i++ < 100) {\n      var button = new_buttons[~~(new_buttons.length * Math.random())]; // can we use this button with the 'current result' ?\n\n      var possible = button.possible(targetResult);\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible); // if we can't take the action, don't use button\n\n      if (!possible) continue;\n      turns = [].concat(_toConsumableArray(turns), [button]);\n      setTargetResult(button.getNextResult);\n    } // store the turns that were taken to get to the result (cheat mode)\n\n\n    setTakenTurns(turns);\n    setGameState(\"ready\");\n  };\n\n  gameState === \"init\" && initialiseGame(); // setButtons([...buttons, <AddButton />]);\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return React.createElement(\"div\", {\n    className: \"gameboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(GameStatus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(Display, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(Buttons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(Cheat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }));\n};\n\nvar GameBoardContainer = function GameBoardContainer(props) {\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameState = _useState2[0],\n      setGameState = _useState2[1];\n\n  var _useState3 = useState(5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      limitButtons = _useState4[0],\n      setLimitButtons = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttons = _useState6[0],\n      setButtons = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      takenTurns = _useState8[0],\n      setTakenTurns = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentResult = _useState10[0],\n      setCurrentResult = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      targetResult = _useState12[0],\n      setTargetResult = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maxTurns = _useState14[0],\n      setMaxTurns = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      currentTurns = _useState16[0],\n      setCurrentTurns = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      startValue = _useState18[0],\n      setStartValue = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      limitTurns = _useState20[0],\n      setLimitTurns = _useState20[1];\n\n  var resetGame = function resetGame() {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  var haveTurn = function haveTurn(action) {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  }; //   const targetTurn = action => setTargetResult(action);\n\n\n  return React.createElement(GameContext.Provider, {\n    value: {\n      limitButtons: limitButtons,\n      haveTurn: haveTurn,\n      gameState: gameState,\n      setGameState: setGameState,\n      currentResult: currentResult,\n      setCurrentResult: setCurrentResult,\n      targetResult: targetResult,\n      setTargetResult: setTargetResult,\n      buttons: buttons,\n      setButtons: setButtons,\n      takenTurns: takenTurns,\n      setTakenTurns: setTakenTurns,\n      currentTurns: currentTurns,\n      setCurrentTurns: setCurrentTurns,\n      resetGame: resetGame,\n      maxTurns: maxTurns,\n      setMaxTurns: setMaxTurns,\n      startValue: startValue,\n      setStartValue: setStartValue,\n      limitTurns: limitTurns,\n      setLimitTurns: setLimitTurns\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \" \", React.createElement(GameBoard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }));\n};\n\nexport default GameBoardContainer;","map":{"version":3,"sources":["/app/src/components/GameBoard.js"],"names":["React","useState","useEffect","useContext","GameContext","Display","GameStatus","Cheat","Buttons","AppendAction","AddAction","SubtractAction","DivideAction","MultiplyAction","ReverseAction","SumAction","GameBoard","gameState","setGameState","setCurrentResult","targetResult","setTargetResult","setButtons","setTakenTurns","setCurrentTurns","setMaxTurns","setStartValue","limitButtons","limitTurns","console","log","possible_buttons","getButton","j","NewButton","length","Math","random","initialiseGame","startingValue","floor","i","new_buttons","limit","tmp","find","button","hash","newMaxTurns","turns","possible","getNextResult","GameBoardContainer","props","setLimitButtons","buttons","takenTurns","currentResult","maxTurns","currentTurns","startValue","setLimitTurns","resetGame","haveTurn","action"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\n\n\nconst GameBoard = () => {\n\n\n  const {\n    gameState,setGameState,\n     setCurrentResult,\n    targetResult, setTargetResult,\n    setButtons,\n    setTakenTurns,\n     setCurrentTurns,\n  setMaxTurns,\n   setStartValue,\n  limitButtons,\n  limitTurns\n  \n  } = useContext(GameContext)\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    // currentTurns === maxTurns &&\n    //   setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n    \n    console.log(\"gameState\", gameState)\n  });\n\n  \n\n  const possible_buttons = [\n    AddAction,\n    AppendAction,\n    SubtractAction,\n    ReverseAction,\n    SumAction,\n    MultiplyAction,\n    DivideAction\n  ];\n\n  const getButton = j => {\n    let NewButton =\n      possible_buttons[~~(possible_buttons.length * Math.random())];\n\n    return NewButton();\n  };\n\n  \n  const initialiseGame = () => {\n    setCurrentTurns(0);\n    const startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue)\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n\n    let i = 0; // failsafe\n    let new_buttons = [];\n    \n    // get random number of possible buttons\n    let limit = Math.floor(Math.random() * limitButtons) + 2;\n    while (new_buttons.length < limit && i++ < 100) {\n      let tmp = getButton(i);\n      \n      // don't include the same button twice\n      if (new_buttons.find(button => button.hash === tmp.hash)) {\n          continue;\n      }\n      \n      new_buttons = [...new_buttons, tmp];\n    }\n\n\n    console.log(\"new_buttons\", new_buttons) \n    // store new buttons\n    setButtons(new_buttons);\n    \n    // generate some turns     \n    const newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n\n    i = 0; // failsafe\n    let turns = [];\n    while (turns.length < newMaxTurns && i++ < 100) {\n      let button = new_buttons[~~(new_buttons.length * Math.random())];\n      \n      // can we use this button with the 'current result' ?\n      let possible = button.possible(targetResult)\n\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible)\n\n      // if we can't take the action, don't use button\n      if (!possible) continue;\n\n      \n      turns = [...turns, button]\n\n      setTargetResult(button.getNextResult)\n    }\n\n    // store the turns that were taken to get to the result (cheat mode)\n    setTakenTurns(turns);\n    \n\n    setGameState(\"ready\");\n\n  };\n\n  gameState === \"init\" && initialiseGame();\n    \n\n\n  // setButtons([...buttons, <AddButton />]);\n\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return (\n        <div className={\"gameboard\"}>\n          <GameStatus />\n          <Display />\n          <Buttons />\n          <Cheat />\n        </div>\n    \n  );\n}\n\nconst GameBoardContainer = props => {\n  const [gameState, setGameState] = useState(\"init\");\n\nconst [limitButtons, setLimitButtons] = useState(5)\n\n  const [buttons, setButtons] = useState([]);\n  const [takenTurns, setTakenTurns] = useState([]);\n\n  const [currentResult, setCurrentResult] = useState(0);\n\n  const [targetResult, setTargetResult] = useState(0);\n  const [maxTurns, setMaxTurns] = useState(0);\n\n  const [currentTurns, setCurrentTurns] = useState(0);\n\n  const [startValue, setStartValue] = useState(0);\n\n  const [limitTurns, setLimitTurns] = useState(0);\n  \n  const resetGame = () => {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  const haveTurn = action => {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  };\n\n//   const targetTurn = action => setTargetResult(action);\n  \n\n  \n  return (<GameContext.Provider value={{\n    limitButtons,\n    haveTurn, \n    gameState,setGameState,\n    currentResult, setCurrentResult,\n    targetResult, setTargetResult,\n    buttons, setButtons,\n    takenTurns, setTakenTurns,\n    currentTurns, setCurrentTurns,\n    resetGame,\n    maxTurns, setMaxTurns,\n    startValue, setStartValue,\n    limitTurns, setLimitTurns\n    \n\n  }}\n  \n> <GameBoard />\n  </GameContext.Provider>)\n}\n\nexport default GameBoardContainer;\n"]},"metadata":{},"sourceType":"module"}