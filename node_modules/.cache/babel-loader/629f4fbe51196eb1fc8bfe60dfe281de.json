{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/app/src/components/GameBoard.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\nvar GameBoard = function GameBoard() {\n  var _useContext = useContext(GameContext),\n      haveTurn = _useContext.haveTurn,\n      gameState = _useContext.gameState,\n      setGameState = _useContext.setGameState,\n      currentResult = _useContext.currentResult,\n      setCurrentResult = _useContext.setCurrentResult,\n      targetResult = _useContext.targetResult,\n      setTargetResult = _useContext.setTargetResult,\n      buttons = _useContext.buttons,\n      setButtons = _useContext.setButtons,\n      takenTurns = _useContext.takenTurns,\n      setTakenTurns = _useContext.setTakenTurns,\n      currentTurns = _useContext.currentTurns,\n      setCurrentTurns = _useContext.setCurrentTurns,\n      maxTurns = _useContext.maxTurns,\n      setMaxTurns = _useContext.setMaxTurns,\n      startValue = _useContext.startValue,\n      setStartValue = _useContext.setStartValue,\n      limitButtons = _useContext.limitButtons,\n      limitTurns = _useContext.limitTurns; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    // currentTurns === maxTurns &&\n    //   setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n    console.log(\"gameState\", gameState);\n  });\n  var possible_buttons = [AddAction, AppendAction, SubtractAction, ReverseAction, SumAction, MultiplyAction, DivideAction];\n\n  var initialiseGame = function initialiseGame() {\n    setCurrentTurns(0);\n    var startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n    var i = 0; // failsafe\n\n    var new_buttons = []; // get random number of possible buttons\n\n    var limit = Math.floor(Math.random() * limitButtons) + 2;\n\n    var _loop = function _loop() {\n      var tmp = getButton(i); // don't include the same button twice\n\n      if (new_buttons.find(function (button) {\n        return button.hash === tmp.hash;\n      })) {\n        return \"continue\";\n      }\n\n      new_buttons = [].concat(_toConsumableArray(new_buttons), [tmp]);\n    };\n\n    while (new_buttons.length < limit && i++ < 100) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n\n    console.log(\"new_buttons\", new_buttons); // store new buttons\n\n    setButtons(new_buttons); // generate some turns     \n\n    var newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    i = 0; // failsafe\n\n    var turns = [];\n\n    while (turns.length < newMaxTurns && i++ < 100) {\n      var button = new_buttons[~~(new_buttons.length * Math.random())]; // can we use this button with the 'current result' ?\n\n      var possible = button.possible(targetResult);\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible); // if we can't take the action, don't use button\n\n      if (!possible) continue;\n      turns = [].concat(_toConsumableArray(turns), [button]);\n      setTargetResult(button.getNextResult);\n    } // store the turns that were taken to get to the result (cheat mode)\n\n\n    setTakenTurns(turns);\n    setGameState(\"ready\");\n  };\n\n  gameState === \"init\" && initialiseGame();\n\n  var getButton = function getButton(j) {\n    var NewButton = possible_buttons[~~(possible_buttons.length * Math.random())];\n    return NewButton();\n  }; // setButtons([...buttons, <AddButton />]);\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n\n  return React.createElement(GameContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, function (_ref) {\n    var gameState = _ref.gameState;\n    return React.createElement(\"div\", {\n      className: \"gameboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(GameStatus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Display, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Cheat, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  });\n};\n\nvar GameBoardContainer = function GameBoardContainer(props) {\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameState = _useState2[0],\n      setGameState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttons = _useState4[0],\n      setButtons = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      takenTurns = _useState6[0],\n      setTakenTurns = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentResult = _useState8[0],\n      setCurrentResult = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      targetResult = _useState10[0],\n      setTargetResult = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      maxTurns = _useState12[0],\n      setMaxTurns = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      currentTurns = _useState14[0],\n      setCurrentTurns = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      startValue = _useState16[0],\n      setStartValue = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      limitTurns = _useState18[0],\n      setLimitTurns = _useState18[1];\n\n  var resetGame = function resetGame() {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  var haveTurn = function haveTurn(action) {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  }; //   const targetTurn = action => setTargetResult(action);\n\n\n  return React.createElement(GameContext.Provider, {\n    value: {\n      haveTurn: haveTurn,\n      gameState: gameState,\n      setGameState: setGameState,\n      currentResult: currentResult,\n      setCurrentResult: setCurrentResult,\n      targetResult: targetResult,\n      setTargetResult: setTargetResult,\n      buttons: buttons,\n      setButtons: setButtons,\n      takenTurns: takenTurns,\n      setTakenTurns: setTakenTurns,\n      currentTurns: currentTurns,\n      setCurrentTurns: setCurrentTurns,\n      resetGame: resetGame,\n      maxTurns: maxTurns,\n      setMaxTurns: setMaxTurns,\n      startValue: startValue,\n      setStartValue: setStartValue,\n      limitTurns: limitTurns,\n      setLimitTurns: setLimitTurns\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \" \", React.createElement(GameBoard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }));\n};\n\nexport default GameBoardContainer;","map":{"version":3,"sources":["/app/src/components/GameBoard.js"],"names":["React","useState","useEffect","useContext","GameContext","Display","GameStatus","Cheat","Buttons","AppendAction","AddAction","SubtractAction","DivideAction","MultiplyAction","ReverseAction","SumAction","GameBoard","haveTurn","gameState","setGameState","currentResult","setCurrentResult","targetResult","setTargetResult","buttons","setButtons","takenTurns","setTakenTurns","currentTurns","setCurrentTurns","maxTurns","setMaxTurns","startValue","setStartValue","limitButtons","limitTurns","console","log","possible_buttons","initialiseGame","startingValue","Math","floor","random","i","new_buttons","limit","tmp","getButton","find","button","hash","length","newMaxTurns","turns","possible","getNextResult","j","NewButton","GameBoardContainer","props","setLimitTurns","resetGame","action"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,oBAgBlBb,UAAU,CAACC,WAAD,CAhBQ;AAAA,MAIpBa,QAJoB,eAIpBA,QAJoB;AAAA,MAKpBC,SALoB,eAKpBA,SALoB;AAAA,MAKVC,YALU,eAKVA,YALU;AAAA,MAMpBC,aANoB,eAMpBA,aANoB;AAAA,MAMLC,gBANK,eAMLA,gBANK;AAAA,MAOpBC,YAPoB,eAOpBA,YAPoB;AAAA,MAONC,eAPM,eAONA,eAPM;AAAA,MAQpBC,OARoB,eAQpBA,OARoB;AAAA,MAQXC,UARW,eAQXA,UARW;AAAA,MASpBC,UAToB,eASpBA,UAToB;AAAA,MASRC,aATQ,eASRA,aATQ;AAAA,MAUpBC,YAVoB,eAUpBA,YAVoB;AAAA,MAUNC,eAVM,eAUNA,eAVM;AAAA,MAWtBC,QAXsB,eAWtBA,QAXsB;AAAA,MAWbC,WAXa,eAWbA,WAXa;AAAA,MAYtBC,UAZsB,eAYtBA,UAZsB;AAAA,MAYVC,aAZU,eAYVA,aAZU;AAAA,MAatBC,YAbsB,eAatBA,YAbsB;AAAA,MActBC,UAdsB,eActBA,UAdsB,EAkBtB;;;AACAjC,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACA;AAEAkC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBnB,SAAzB;AACD,GANQ,CAAT;AAUA,MAAMoB,gBAAgB,GAAG,CACvB5B,SADuB,EAEvBD,YAFuB,EAGvBE,cAHuB,EAIvBG,aAJuB,EAKvBC,SALuB,EAMvBF,cANuB,EAOvBD,YAPuB,CAAzB;;AAWA,MAAM2B,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BV,IAAAA,eAAe,CAAC,CAAD,CAAf;AAEA,QAAMW,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAtB;AACAV,IAAAA,aAAa,CAACO,aAAD,CAAb;AACAnB,IAAAA,gBAAgB,CAACmB,aAAD,CAAhB;AACAjB,IAAAA,eAAe,CAACiB,aAAD,CAAf;AAEA,QAAII,CAAC,GAAG,CAAR,CAR2B,CAQhB;;AACX,QAAIC,WAAW,GAAG,EAAlB,CAT2B,CAW3B;;AACA,QAAIC,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,YAA3B,IAA2C,CAAvD;;AAZ2B;AAczB,UAAIa,GAAG,GAAGC,SAAS,CAACJ,CAAD,CAAnB,CAdyB,CAgBzB;;AACA,UAAIC,WAAW,CAACI,IAAZ,CAAiB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACC,IAAP,KAAgBJ,GAAG,CAACI,IAAxB;AAAA,OAAvB,CAAJ,EAA0D;AACtD;AACH;;AAEDN,MAAAA,WAAW,gCAAOA,WAAP,IAAoBE,GAApB,EAAX;AArByB;;AAa3B,WAAOF,WAAW,CAACO,MAAZ,GAAqBN,KAArB,IAA8BF,CAAC,KAAK,GAA3C,EAAgD;AAAA;;AAAA,+BAK1C;AAIL;;AAGDR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BQ,WAA3B,EAzB2B,CA0B3B;;AACApB,IAAAA,UAAU,CAACoB,WAAD,CAAV,CA3B2B,CA6B3B;;AACA,QAAMQ,WAAW,GAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,UAA3B,IAAyC,CAA7D;AACAJ,IAAAA,WAAW,CAACsB,WAAD,CAAX;AAEAT,IAAAA,CAAC,GAAG,CAAJ,CAjC2B,CAiCpB;;AACP,QAAIU,KAAK,GAAG,EAAZ;;AACA,WAAOA,KAAK,CAACF,MAAN,GAAeC,WAAf,IAA8BT,CAAC,KAAK,GAA3C,EAAgD;AAC9C,UAAIM,MAAM,GAAGL,WAAW,CAAC,CAAC,EAAEA,WAAW,CAACO,MAAZ,GAAqBX,IAAI,CAACE,MAAL,EAAvB,CAAF,CAAxB,CAD8C,CAG9C;;AACA,UAAIY,QAAQ,GAAGL,MAAM,CAACK,QAAP,CAAgBjC,YAAhB,CAAf;AAEAc,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBf,YAAtB,EAAoC4B,MAAM,CAACC,IAA3C,EAAiD,UAAjD,EAA6DI,QAA7D,EAN8C,CAQ9C;;AACA,UAAI,CAACA,QAAL,EAAe;AAGfD,MAAAA,KAAK,gCAAOA,KAAP,IAAcJ,MAAd,EAAL;AAEA3B,MAAAA,eAAe,CAAC2B,MAAM,CAACM,aAAR,CAAf;AACD,KAlD0B,CAoD3B;;;AACA7B,IAAAA,aAAa,CAAC2B,KAAD,CAAb;AAGAnC,IAAAA,YAAY,CAAC,OAAD,CAAZ;AAED,GA1DD;;AA4DAD,EAAAA,SAAS,KAAK,MAAd,IAAwBqB,cAAc,EAAtC;;AAGA,MAAMS,SAAS,GAAG,SAAZA,SAAY,CAAAS,CAAC,EAAI;AACrB,QAAIC,SAAS,GACXpB,gBAAgB,CAAC,CAAC,EAAEA,gBAAgB,CAACc,MAAjB,GAA0BX,IAAI,CAACE,MAAL,EAA5B,CAAF,CADlB;AAGA,WAAOe,SAAS,EAAhB;AACD,GALD,CAvGsB,CA+GtB;AAEA;AACA;;;AAEA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAExC,SAAF,QAAEA,SAAF;AAAA,WACC;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADD;AAAA,GADH,CADF;AAcD,CAlID;;AAoIA,IAAMyC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK,EAAI;AAAA,kBACA3D,QAAQ,CAAC,MAAD,CADR;AAAA;AAAA,MAC3BiB,SAD2B;AAAA,MAChBC,YADgB;;AAAA,mBAGJlB,QAAQ,CAAC,EAAD,CAHJ;AAAA;AAAA,MAG3BuB,OAH2B;AAAA,MAGlBC,UAHkB;;AAAA,mBAIExB,QAAQ,CAAC,EAAD,CAJV;AAAA;AAAA,MAI3ByB,UAJ2B;AAAA,MAIfC,aAJe;;AAAA,mBAMQ1B,QAAQ,CAAC,CAAD,CANhB;AAAA;AAAA,MAM3BmB,aAN2B;AAAA,MAMZC,gBANY;;AAAA,mBAQMpB,QAAQ,CAAC,CAAD,CARd;AAAA;AAAA,MAQ3BqB,YAR2B;AAAA,MAQbC,eARa;;AAAA,oBASFtB,QAAQ,CAAC,CAAD,CATN;AAAA;AAAA,MAS3B6B,QAT2B;AAAA,MASjBC,WATiB;;AAAA,oBAWM9B,QAAQ,CAAC,CAAD,CAXd;AAAA;AAAA,MAW3B2B,YAX2B;AAAA,MAWbC,eAXa;;AAAA,oBAaE5B,QAAQ,CAAC,CAAD,CAbV;AAAA;AAAA,MAa3B+B,UAb2B;AAAA,MAafC,aAbe;;AAAA,oBAeEhC,QAAQ,CAAC,CAAD,CAfV;AAAA;AAAA,MAe3BkC,UAf2B;AAAA,MAef0B,aAfe;;AAiBlC,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBjC,IAAAA,eAAe,CAAC,CAAD,CAAf;AACAR,IAAAA,gBAAgB,CAACW,UAAD,CAAhB;AACAb,IAAAA,YAAY,CAAC,OAAD,CAAZ;AACD,GAJD;;AAMA,MAAMF,QAAQ,GAAG,SAAXA,QAAW,CAAA8C,MAAM,EAAI;AACzBlC,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACAP,IAAAA,gBAAgB,CAAC0C,MAAD,CAAhB;AACD,GAHD,CAvBkC,CA4BpC;;;AAIE,SAAQ,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACnC9C,MAAAA,QAAQ,EAARA,QADmC;AAEnCC,MAAAA,SAAS,EAATA,SAFmC;AAEzBC,MAAAA,YAAY,EAAZA,YAFyB;AAGnCC,MAAAA,aAAa,EAAbA,aAHmC;AAGpBC,MAAAA,gBAAgB,EAAhBA,gBAHoB;AAInCC,MAAAA,YAAY,EAAZA,YAJmC;AAIrBC,MAAAA,eAAe,EAAfA,eAJqB;AAKnCC,MAAAA,OAAO,EAAPA,OALmC;AAK1BC,MAAAA,UAAU,EAAVA,UAL0B;AAMnCC,MAAAA,UAAU,EAAVA,UANmC;AAMvBC,MAAAA,aAAa,EAAbA,aANuB;AAOnCC,MAAAA,YAAY,EAAZA,YAPmC;AAOrBC,MAAAA,eAAe,EAAfA,eAPqB;AAQnCiC,MAAAA,SAAS,EAATA,SARmC;AASnChC,MAAAA,QAAQ,EAARA,QATmC;AASzBC,MAAAA,WAAW,EAAXA,WATyB;AAUnCC,MAAAA,UAAU,EAAVA,UAVmC;AAUvBC,MAAAA,aAAa,EAAbA,aAVuB;AAWnCE,MAAAA,UAAU,EAAVA,UAXmC;AAWvB0B,MAAAA,aAAa,EAAbA;AAXuB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAgBR,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBQ,CAAR;AAkBD,CAlDD;;AAoDA,eAAeF,kBAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\n\n\nconst GameBoard = () => {\n\n\n  const {\n    haveTurn, \n    gameState,setGameState,\n    currentResult, setCurrentResult,\n    targetResult, setTargetResult,\n    buttons, setButtons,\n    takenTurns, setTakenTurns,\n    currentTurns, setCurrentTurns,\n  maxTurns,setMaxTurns,\n  startValue, setStartValue,\n  limitButtons,\n  limitTurns\n  \n  } = useContext(GameContext)\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    // currentTurns === maxTurns &&\n    //   setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n    \n    console.log(\"gameState\", gameState)\n  });\n\n  \n\n  const possible_buttons = [\n    AddAction,\n    AppendAction,\n    SubtractAction,\n    ReverseAction,\n    SumAction,\n    MultiplyAction,\n    DivideAction\n  ];\n\n  \n  const initialiseGame = () => {\n    setCurrentTurns(0);\n\n    const startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue)\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n\n    let i = 0; // failsafe\n    let new_buttons = [];\n    \n    // get random number of possible buttons\n    let limit = Math.floor(Math.random() * limitButtons) + 2;\n    while (new_buttons.length < limit && i++ < 100) {\n      let tmp = getButton(i);\n      \n      // don't include the same button twice\n      if (new_buttons.find(button => button.hash === tmp.hash)) {\n          continue;\n      }\n      \n      new_buttons = [...new_buttons, tmp];\n    }\n\n\n    console.log(\"new_buttons\", new_buttons) \n    // store new buttons\n    setButtons(new_buttons);\n    \n    // generate some turns     \n    const newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n\n    i = 0; // failsafe\n    let turns = [];\n    while (turns.length < newMaxTurns && i++ < 100) {\n      let button = new_buttons[~~(new_buttons.length * Math.random())];\n      \n      // can we use this button with the 'current result' ?\n      let possible = button.possible(targetResult)\n\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible)\n\n      // if we can't take the action, don't use button\n      if (!possible) continue;\n\n      \n      turns = [...turns, button]\n\n      setTargetResult(button.getNextResult)\n    }\n\n    // store the turns that were taken to get to the result (cheat mode)\n    setTakenTurns(turns);\n    \n\n    setGameState(\"ready\");\n\n  };\n\n  gameState === \"init\" && initialiseGame();\n    \n\n  const getButton = j => {\n    let NewButton =\n      possible_buttons[~~(possible_buttons.length * Math.random())];\n\n    return NewButton();\n  };\n\n\n  // setButtons([...buttons, <AddButton />]);\n\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return (\n    <GameContext.Consumer>\n      {({gameState}) => \n        <div className={\"gameboard\"}>\n          <GameStatus />\n          <Display />\n          <Buttons />\n          <Cheat />\n        </div>\n      }\n\n      </GameContext.Consumer>\n    \n  );\n}\n\nconst GameBoardContainer = props => {\n  const [gameState, setGameState] = useState(\"init\");\n\n  const [buttons, setButtons] = useState([]);\n  const [takenTurns, setTakenTurns] = useState([]);\n\n  const [currentResult, setCurrentResult] = useState(0);\n\n  const [targetResult, setTargetResult] = useState(0);\n  const [maxTurns, setMaxTurns] = useState(0);\n\n  const [currentTurns, setCurrentTurns] = useState(0);\n\n  const [startValue, setStartValue] = useState(0);\n\n  const [limitTurns, setLimitTurns] = useState(0);\n  \n  const resetGame = () => {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  const haveTurn = action => {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  };\n\n//   const targetTurn = action => setTargetResult(action);\n  \n\n  \n  return (<GameContext.Provider value={{\n    haveTurn, \n    gameState,setGameState,\n    currentResult, setCurrentResult,\n    targetResult, setTargetResult,\n    buttons, setButtons,\n    takenTurns, setTakenTurns,\n    currentTurns, setCurrentTurns,\n    resetGame,\n    maxTurns, setMaxTurns,\n    startValue, setStartValue,\n    limitTurns, setLimitTurns\n    \n\n  }}\n  \n> <GameBoard />\n  </GameContext.Provider>)\n}\n\nexport default GameBoardContainer;\n"]},"metadata":{},"sourceType":"module"}