{"ast":null,"code":"import _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/app/src/components/GameBoard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\n\nfunction GameBoard() {\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameState = _useState2[0],\n      setGameState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttons = _useState4[0],\n      setButtons = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      takenTurns = _useState6[0],\n      setTakenTurns = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentResult = _useState8[0],\n      setCurrentResult = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      targetResult = _useState10[0],\n      setTargetResult = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      maxTurns = _useState12[0],\n      setMaxTurns = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      currentTurns = _useState14[0],\n      setCurrentTurns = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      startValue = _useState16[0],\n      setStartValue = _useState16[1];\n\n  var haveTurn = function haveTurn(action) {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  }; //   const targetTurn = action => setTargetResult(action);\n  // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    currentTurns === maxTurns && setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n  });\n  var possible_buttons = [AddAction, AppendAction, SubtractAction, ReverseAction, SumAction, MultiplyAction, DivideAction];\n  var limitTurns = 5;\n  var limitButtons = 5;\n\n  var initialiseGame = function initialiseGame() {\n    setCurrentTurns(0);\n    var startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n    var i = 0; // failsafe\n\n    var new_buttons = []; // get random number of possible buttons\n\n    var limit = Math.floor(Math.random() * limitButtons) + 2;\n\n    var _loop = function _loop() {\n      var tmp = getButton(i); // don't include the same button twice\n\n      if (new_buttons.find(function (button) {\n        return button.hash === tmp.hash;\n      })) {\n        return \"continue\";\n      }\n\n      new_buttons = [].concat(_toConsumableArray(new_buttons), [tmp]);\n    };\n\n    while (new_buttons.length < limit && i++ < 100) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    } // store new buttons\n\n\n    setButtons(new_buttons); // generate some turns     \n\n    var newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    i = 0; // failsafe\n\n    var turns = [];\n\n    while (turns.length < newMaxTurns && i++ < 100) {\n      var button = new_buttons[~~(new_buttons.length * Math.random())]; // can we use this button with the 'current result' ?\n\n      var possible = button.possible(targetResult);\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible); // if we can't take the action, don't use button\n\n      if (!possible) continue;\n      turns = [].concat(_toConsumableArray(turns), [button]);\n      setTargetResult(button.getNextResult);\n    } // store the turns that were taken to get to the result (cheat mode)\n\n\n    setTakenTurns(turns);\n    setGameState(\"ready\");\n  };\n\n  var resetGame = function resetGame() {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  var getButton = function getButton(j) {\n    var NewButton = possible_buttons[~~(possible_buttons.length * Math.random())];\n    return NewButton();\n  };\n\n  gameState === \"init\" && initialiseGame(); // setButtons([...buttons, <AddButton />]);\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return React.createElement(GameContext.Provider, {\n    value: {\n      buttons: buttons,\n      currentResult: currentResult,\n      setCurrentResult: setCurrentResult,\n      targetResult: targetResult,\n      maxTurns: maxTurns,\n      currentTurns: currentTurns,\n      gameState: gameState,\n      haveTurn: haveTurn,\n      initialiseGame: initialiseGame,\n      resetGame: resetGame,\n      takenTurns: takenTurns\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"gameboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(GameStatus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), React.createElement(Display, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(Buttons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(Cheat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })));\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["/app/src/components/GameBoard.js"],"names":["React","useState","useEffect","GameContext","Display","GameStatus","Cheat","Buttons","AppendAction","GameBoard","gameState","setGameState","buttons","setButtons","takenTurns","setTakenTurns","currentResult","setCurrentResult","targetResult","setTargetResult","maxTurns","setMaxTurns","currentTurns","setCurrentTurns","startValue","setStartValue","haveTurn","action","possible_buttons","AddAction","SubtractAction","ReverseAction","SumAction","MultiplyAction","DivideAction","limitTurns","limitButtons","initialiseGame","startingValue","Math","floor","random","i","new_buttons","limit","tmp","getButton","find","button","hash","length","newMaxTurns","turns","possible","console","log","getNextResult","resetGame","j","NewButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\n\n\n\nfunction GameBoard() {\n  const [gameState, setGameState] = useState(\"init\");\n\n  const [buttons, setButtons] = useState([]);\n  const [takenTurns, setTakenTurns] = useState([]);\n\n  const [currentResult, setCurrentResult] = useState(0);\n\n  const [targetResult, setTargetResult] = useState(0);\n  const [maxTurns, setMaxTurns] = useState(0);\n\n  const [currentTurns, setCurrentTurns] = useState(0);\n\n  const [startValue, setStartValue] = useState(0);\n\n  const haveTurn = action => {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  };\n\n//   const targetTurn = action => setTargetResult(action);\n  \n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    currentTurns === maxTurns &&\n      setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n  });\n\n  const possible_buttons = [\n    AddAction,\n    AppendAction,\n    SubtractAction,\n    ReverseAction,\n    SumAction,\n    MultiplyAction,\n    DivideAction\n  ];\n\n  const limitTurns = 5;\n  const limitButtons = 5;\n\n  const initialiseGame = () => {\n\n    setCurrentTurns(0);\n\n    const startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue)\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n\n    let i = 0; // failsafe\n    let new_buttons = [];\n    \n    // get random number of possible buttons\n    let limit = Math.floor(Math.random() * limitButtons) + 2;\n    while (new_buttons.length < limit && i++ < 100) {\n      let tmp = getButton(i);\n      \n      // don't include the same button twice\n      if (new_buttons.find(button => button.hash === tmp.hash)) {\n          continue;\n      }\n      \n      new_buttons = [...new_buttons, tmp];\n    }\n    // store new buttons\n    setButtons(new_buttons);\n    \n    // generate some turns     \n    const newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n\n    i = 0; // failsafe\n    let turns = [];\n    while (turns.length < newMaxTurns && i++ < 100) {\n      let button = new_buttons[~~(new_buttons.length * Math.random())];\n      \n      // can we use this button with the 'current result' ?\n      let possible = button.possible(targetResult)\n\n      console.log(\"Button\", targetResult, button.hash, 'Possible', possible)\n\n      // if we can't take the action, don't use button\n      if (!possible) continue;\n\n      \n      turns = [...turns, button]\n\n      setTargetResult(button.getNextResult)\n    }\n\n    // store the turns that were taken to get to the result (cheat mode)\n    setTakenTurns(turns);\n    \n\n    setGameState(\"ready\");\n\n  };\n\n  const resetGame = () => {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  const getButton = j => {\n    let NewButton =\n      possible_buttons[~~(possible_buttons.length * Math.random())];\n\n    return NewButton();\n  };\n\n  gameState === \"init\" && initialiseGame();\n\n  // setButtons([...buttons, <AddButton />]);\n\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return (\n    <GameContext.Provider\n      value={{\n        buttons,\n        currentResult,\n        setCurrentResult,\n        targetResult,\n        maxTurns,\n        currentTurns,\n        gameState,\n        haveTurn,\n        initialiseGame,\n        resetGame,\n        takenTurns\n      }}\n    >\n      <div className={\"gameboard\"}>\n        <GameStatus />\n        <Display />\n        <Buttons />\n        <Cheat />\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}