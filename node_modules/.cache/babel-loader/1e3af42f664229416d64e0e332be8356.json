{"ast":null,"code":"var _jsxFileName = \"/app/src/components/GameBoard/Buttons.js\";\nimport React, { useContext } from \"react\";\nimport { GameContext } from \"../../GameContext\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"../GameBoard.css\";\nimport { targetPropType } from \"reactstrap/lib/utils\";\n\nfunction Buttons() {\n  return React.createElement(GameContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, function (_ref) {\n    var buttons = _ref.buttons,\n        gameState = _ref.gameState,\n        resetGame = _ref.resetGame;\n    return React.createElement(Row, {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, buttons[0] && buttons[0].button), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"CLR\")), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, buttons[1] && buttons[1].button), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, buttons[2] && buttons[2].button), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, buttons[3] && buttons[3].button), React.createElement(Col, {\n      className: \"game-button\",\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, buttons[4] && buttons[4].button));\n  });\n} // export const SumAction = () => {\n//   const { targetResult } = useContext(GameContext)\n//   const getNextResult = result =>\n//     [...result.toString()].reduce((x, y) => parseInt(x) + parseInt(y));\n//   const isPossible = currentResult => {\n//     let result = currentResult.toString().length > 1;\n//     return result;\n//   };\n//   const isPossibleForTarget =\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"sum\",\n//     possible:  () => {\n//       let result = targetResult.toString().length > 1;\n//       return result;\n//     },   \n//     button: (\n//       <GameContext.Consumer key={\"sum\"}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"sum\"}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//             title=\"Sum numbers - 13 = 1+3 = 4\"\n//           >\n//             SUM\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// e\n// export const SubtractAction = () => {\n//   let number = Math.floor(Math.random() * 9) + 1;\n//   const getNextResult = result => result - number;\n//   const isPossible = currentValue => true;\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"subtract-\" + number,\n//     possible: isPossible,\n//     button: (\n//       <GameContext.Consumer key={\"subtract-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"subtract\"}\n//             title={\"Subtract \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             - {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// export const AddAction = () => {\n//   let number = Math.floor(Math.random() * 9) + 1;\n//   const getNextResult = result => result + number;\n//   const isPossible = currentValue => true;\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"add-\" + number,\n//     possible: isPossible,\n//     button: (\n//       <GameContext.Consumer key={\"add-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"add\"}\n//             title={\"Add \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             + {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// export const MultiplyAction = () => {\n//   let number = Math.floor(Math.random() * 3) + 1;\n//   const getNextResult = result => result * number;\n//   const isPossible = currentValue => true;\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"multiply-\" + number,\n//     possible: isPossible,\n//     button: (\n//       <GameContext.Consumer key={\"multiply-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"multiply\"}\n//             title={\"Multiply \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             X {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// export const DivideAction = () => {\n//   let number = Math.floor(Math.random() * 3) + 1;\n//   const { targetResult } = useContext(GameContext)\n//   const getNextResult = result => result / number;\n//   const isPossible = currentValue => currentValue > 1 && (currentValue % number == 0)   ;\n//   const isPossibleForTarget = () => targetResult > 1 && (currentValue % number == 0)   ;\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"divide-\" + number,\n//     possible: isPossibleForTarget,\n//     button: (\n//       <GameContext.Consumer key={\"divide-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"divide\"}\n//             title={\"Divide \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             / {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n\n\nexport default Buttons;","map":{"version":3,"sources":["/app/src/components/GameBoard/Buttons.js"],"names":["React","useContext","GameContext","Row","Col","Button","targetPropType","Buttons","buttons","gameState","resetGame","button"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,QAAiC,YAAjC;AACA,OAAO,kCAAP;AAEA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,sBAA/B;;AAEA,SAASC,OAAT,GAAmB;AACjB,SACE,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,QAAYC,SAAZ,QAAYA,SAAZ;AAAA,QAAuBC,SAAvB,QAAuBA,SAAvB;AAAA,WACC,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWG,MAD5B,CAFF,EAKE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAED,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CALF,EASE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWG,MAD5B,CAVF,EAaE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWG,MAD5B,CAbF,EAiBE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAkBE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWG,MAD5B,CAlBF,EAqBE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,aAAhB;AAA+B,MAAA,EAAE,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWG,MAD5B,CArBF,CADD;AAAA,GADH,CADF;AA+BD,C,CAED;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeJ,OAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { GameContext } from \"../../GameContext\";\n\nimport { Row, Col, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"../GameBoard.css\";\nimport { targetPropType } from \"reactstrap/lib/utils\";\n\nfunction Buttons() {\n  return (\n    <GameContext.Consumer>\n      {({ buttons, gameState, resetGame }) => (\n        <Row className={\"buttons\"}>\n          <Col className={\"game-button\"} xs={4} />\n          <Col className={\"game-button\"} xs={4}>\n            {buttons[0] && buttons[0].button}\n          </Col>\n          <Col className={\"game-button\"} xs={4}>\n            <Button onClick={resetGame}>CLR</Button>\n          </Col>\n\n          <Col className={\"game-button\"} xs={4} />\n          <Col className={\"game-button\"} xs={4}>\n            {buttons[1] && buttons[1].button}\n          </Col>\n          <Col className={\"game-button\"} xs={4}>\n            {buttons[2] && buttons[2].button}\n          </Col>\n\n          <Col className={\"game-button\"} xs={4} />\n          <Col className={\"game-button\"} xs={4}>\n            {buttons[3] && buttons[3].button}\n          </Col>\n          <Col className={\"game-button\"} xs={4}>\n            {buttons[4] && buttons[4].button}\n          </Col>\n        </Row>\n      )}\n    </GameContext.Consumer>\n  );\n}\n\n// export const SumAction = () => {\n  \n//   const { targetResult } = useContext(GameContext)\n\n//   const getNextResult = result =>\n//     [...result.toString()].reduce((x, y) => parseInt(x) + parseInt(y));\n//   const isPossible = currentResult => {\n//     let result = currentResult.toString().length > 1;\n\n//     return result;\n//   };\n//   const isPossibleForTarget =\n\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"sum\",\n//     possible:  () => {\n//       let result = targetResult.toString().length > 1;\n  \n//       return result;\n//     },   \n\n//     button: (\n//       <GameContext.Consumer key={\"sum\"}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"sum\"}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//             title=\"Sum numbers - 13 = 1+3 = 4\"\n//           >\n//             SUM\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n\n// e\n\n\n// export const SubtractAction = () => {\n//   let number = Math.floor(Math.random() * 9) + 1;\n\n//   const getNextResult = result => result - number;\n//   const isPossible = currentValue => true;\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"subtract-\" + number,\n//     possible: isPossible,\n\n//     button: (\n//       <GameContext.Consumer key={\"subtract-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"subtract\"}\n//             title={\"Subtract \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             - {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n\n// export const AddAction = () => {\n//   let number = Math.floor(Math.random() * 9) + 1;\n\n//   const getNextResult = result => result + number;\n//   const isPossible = currentValue => true;\n\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"add-\" + number,\n//     possible: isPossible,\n\n//     button: (\n//       <GameContext.Consumer key={\"add-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"add\"}\n//             title={\"Add \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             + {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// export const MultiplyAction = () => {\n//   let number = Math.floor(Math.random() * 3) + 1;\n\n//   const getNextResult = result => result * number;\n//   const isPossible = currentValue => true;\n\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"multiply-\" + number,\n//     possible: isPossible,\n\n//     button: (\n//       <GameContext.Consumer key={\"multiply-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"multiply\"}\n//             title={\"Multiply \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             X {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n// export const DivideAction = () => {\n//   let number = Math.floor(Math.random() * 3) + 1;\n\n//   const { targetResult } = useContext(GameContext)\n\n//   const getNextResult = result => result / number;\n//   const isPossible = currentValue => currentValue > 1 && (currentValue % number == 0)   ;\n//   const isPossibleForTarget = () => targetResult > 1 && (currentValue % number == 0)   ;\n\n//   return {\n//     getNextResult: getNextResult,\n//     hash: \"divide-\" + number,\n//     possible: isPossibleForTarget,\n\n//     button: (\n//       <GameContext.Consumer key={\"divide-\" + number}>\n//         {({ haveTurn, gameState, currentResult }) => (\n//           <Button\n//             className={\"divide\"}\n//             title={\"Divide \" + number}\n//             disabled={!isPossible(currentResult) || gameState !== \"ready\"}\n//             onClick={() => haveTurn(getNextResult)}\n//           >\n//             / {number}\n//           </Button>\n//         )}\n//       </GameContext.Consumer>\n//     )\n//   };\n// };\n\nexport default Buttons;\n"]},"metadata":{},"sourceType":"module"}