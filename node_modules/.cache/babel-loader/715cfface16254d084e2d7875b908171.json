{"ast":null,"code":"import _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/app/src/components/GameBoard.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\nvar GameBoard = function GameBoard() {\n  var _useContext = useContext(GameContext),\n      gameState = _useContext.gameState,\n      setGameState = _useContext.setGameState,\n      setCurrentResult = _useContext.setCurrentResult,\n      targetResult = _useContext.targetResult,\n      setTargetResult = _useContext.setTargetResult,\n      setButtons = _useContext.setButtons,\n      setTakenTurns = _useContext.setTakenTurns,\n      setCurrentTurns = _useContext.setCurrentTurns,\n      currentTurns = _useContext.currentTurns,\n      maxTurns = _useContext.maxTurns,\n      currentResult = _useContext.currentResult,\n      setMaxTurns = _useContext.setMaxTurns,\n      setStartValue = _useContext.setStartValue,\n      limitButtons = _useContext.limitButtons,\n      limitTurns = _useContext.limitTurns; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    currentTurns === maxTurns && setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n    console.log(\"gameState\", gameState);\n    gameState === \"init\" && initialiseGame();\n  });\n  var possible_buttons = [AddAction, AppendAction, SubtractAction, ReverseAction, SumAction, MultiplyAction, DivideAction];\n\n  var getButton = function getButton(j) {\n    var NewButton = possible_buttons[~~(possible_buttons.length * Math.random())];\n    return NewButton();\n  }; // setButtons([...buttons, <AddButton />]);\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n\n  return React.createElement(\"div\", {\n    className: \"gameboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(GameStatus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Display, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Buttons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Cheat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n};\n\nvar GameBoardContainer = function GameBoardContainer(props) {\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameState = _useState2[0],\n      setGameState = _useState2[1];\n\n  var _useState3 = useState(5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      limitButtons = _useState4[0],\n      setLimitButtons = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttons = _useState6[0],\n      setButtons = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      takenTurns = _useState8[0],\n      setTakenTurns = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentResult = _useState10[0],\n      setCurrentResult = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      targetResult = _useState12[0],\n      setTargetResult = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maxTurns = _useState14[0],\n      setMaxTurns = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      currentTurns = _useState16[0],\n      setCurrentTurns = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      startValue = _useState18[0],\n      setStartValue = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      limitTurns = _useState20[0],\n      setLimitTurns = _useState20[1];\n\n  var resetGame = function resetGame() {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  var haveTurn = function haveTurn(action) {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  }; //   const targetTurn = action => setTargetResult(action);\n\n\n  var initialiseGame = function initialiseGame() {\n    setCurrentTurns(0);\n    var startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n    var i = 0; // failsafe\n\n    var new_buttons = []; // get random number of possible buttons\n\n    var limit = Math.floor(Math.random() * limitButtons) + 1;\n\n    var _loop = function _loop() {\n      var tmp = getButton(i); // don't include the same button twice\n\n      if (new_buttons.find(function (button) {\n        return button.hash === tmp.hash;\n      })) {\n        return \"continue\";\n      }\n\n      new_buttons = [].concat(_toConsumableArray(new_buttons), [tmp]);\n    };\n\n    while (new_buttons.length < limit && i++ < 100) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    } // store new buttons\n\n\n    setButtons(new_buttons); // generate some turns\n\n    var newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    var x = startingValue;\n    i = 0; // failsafe\n\n    var turns = [];\n\n    while (turns.length < newMaxTurns && i++ < 100) {\n      var button = new_buttons[~~(new_buttons.length * Math.random())]; // can we use this button with the 'current result' ?\n\n      var possible = button.possible(x); // if we can't take the action, don't use button\n\n      if (!possible) continue;\n      turns = [].concat(_toConsumableArray(turns), [button]);\n      x = button.getNextResult(x);\n      console.log('x', x);\n    }\n\n    setTargetResult(x); // store the turns that were taken to get to the result (cheat mode)\n\n    setTakenTurns(turns);\n    setGameState(\"ready\");\n  };\n\n  return React.createElement(GameContext.Provider, {\n    value: {\n      limitButtons: limitButtons,\n      setLimitButtons: setLimitButtons,\n      haveTurn: haveTurn,\n      gameState: gameState,\n      setGameState: setGameState,\n      currentResult: currentResult,\n      setCurrentResult: setCurrentResult,\n      targetResult: targetResult,\n      setTargetResult: setTargetResult,\n      buttons: buttons,\n      setButtons: setButtons,\n      takenTurns: takenTurns,\n      setTakenTurns: setTakenTurns,\n      currentTurns: currentTurns,\n      setCurrentTurns: setCurrentTurns,\n      resetGame: resetGame,\n      maxTurns: maxTurns,\n      setMaxTurns: setMaxTurns,\n      startValue: startValue,\n      setStartValue: setStartValue,\n      limitTurns: limitTurns,\n      setLimitTurns: setLimitTurns,\n      initialiseGame: initialiseGame\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \" \", React.createElement(GameBoard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }));\n};\n\nexport default GameBoardContainer;","map":{"version":3,"sources":["/app/src/components/GameBoard.js"],"names":["React","useState","useEffect","useContext","GameContext","Display","GameStatus","Cheat","Buttons","AppendAction","AddAction","SubtractAction","DivideAction","MultiplyAction","ReverseAction","SumAction","GameBoard","gameState","setGameState","setCurrentResult","targetResult","setTargetResult","setButtons","setTakenTurns","setCurrentTurns","currentTurns","maxTurns","currentResult","setMaxTurns","setStartValue","limitButtons","limitTurns","console","log","initialiseGame","possible_buttons","getButton","j","NewButton","length","Math","random","GameBoardContainer","props","setLimitButtons","buttons","takenTurns","startValue","setLimitTurns","resetGame","haveTurn","action","startingValue","floor","i","new_buttons","limit","tmp","find","button","hash","newMaxTurns","x","turns","possible","getNextResult"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport Display from \"./GameBoard/Display\";\nimport GameStatus from \"./GameBoard/GameStatus\";\nimport Cheat from \"./GameBoard/Cheat\";\nimport Buttons from \"./GameBoard/Buttons\";\nimport AppendAction from \"./Actions/Append\";\nimport AddAction from \"./Actions/Add\";\nimport SubtractAction from \"./Actions/Subtract\";\nimport DivideAction from \"./Actions/Divide\";\nimport MultiplyAction from \"./Actions/Multiply\";\nimport ReverseAction from \"./Actions/Reverse\";\nimport SumAction from \"./Actions/Sum\";\n\nconst GameBoard = () => {\n  const {\n    gameState,\n    setGameState,\n    setCurrentResult,\n    targetResult,\n    setTargetResult,\n    setButtons,\n    setTakenTurns,\n    setCurrentTurns,\n    currentTurns,\n    maxTurns,\n    currentResult,\n    setMaxTurns,\n    setStartValue,\n    limitButtons,\n    limitTurns\n  } = useContext(GameContext);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    currentTurns === maxTurns &&\n      setGameState(currentResult === targetResult ? \"Won\" : \"Lost\");\n\n    console.log(\"gameState\", gameState);\n    gameState === \"init\" && initialiseGame();\n\n  });\n\n  const possible_buttons = [\n    AddAction,\n    AppendAction,\n    SubtractAction,\n    ReverseAction,\n    SumAction,\n    MultiplyAction,\n    DivideAction\n  ];\n\n  const getButton = j => {\n    let NewButton =\n      possible_buttons[~~(possible_buttons.length * Math.random())];\n\n    return NewButton();\n  };\n\n \n\n\n  // setButtons([...buttons, <AddButton />]);\n\n  //   setState({ ...state, buttons: \"hello\" })\n  //   <AppendButton />\n\n  return (\n    <div className={\"gameboard\"}>\n      <GameStatus />\n      <Display />\n      <Buttons />\n      <Cheat />\n    </div>\n  );\n};\n\nconst GameBoardContainer = props => {\n  const [gameState, setGameState] = useState(\"init\");\n\n  const [limitButtons, setLimitButtons] = useState(5);\n\n  const [buttons, setButtons] = useState([]);\n  const [takenTurns, setTakenTurns] = useState([]);\n\n  const [currentResult, setCurrentResult] = useState(0);\n\n  const [targetResult, setTargetResult] = useState(0);\n  const [maxTurns, setMaxTurns] = useState(0);\n\n  const [currentTurns, setCurrentTurns] = useState(0);\n\n  const [startValue, setStartValue] = useState(0);\n\n  const [limitTurns, setLimitTurns] = useState(0);\n\n  const resetGame = () => {\n    setCurrentTurns(0);\n    setCurrentResult(startValue);\n    setGameState(\"ready\");\n  };\n\n  const haveTurn = action => {\n    setCurrentTurns(currentTurns + 1);\n    setCurrentResult(action);\n  };\n\n  //   const targetTurn = action => setTargetResult(action);\n  const initialiseGame = () => {\n    setCurrentTurns(0);\n    const startingValue = Math.floor(Math.random() * 100);\n    setStartValue(startingValue);\n    setCurrentResult(startingValue);\n    setTargetResult(startingValue);\n\n    let i = 0; // failsafe\n    let new_buttons = [];\n\n    // get random number of possible buttons\n    let limit = Math.floor(Math.random() * limitButtons) + 1;\n    while (new_buttons.length < limit && i++ < 100) {\n      let tmp = getButton(i);\n\n      // don't include the same button twice\n      if (new_buttons.find(button => button.hash === tmp.hash)) {\n        continue;\n      }\n\n      new_buttons = [...new_buttons, tmp];\n    }\n\n    // store new buttons\n    setButtons(new_buttons);\n\n    // generate some turns\n    const newMaxTurns = Math.floor(Math.random() * limitTurns) + 3;\n    setMaxTurns(newMaxTurns);\n    let x = startingValue;\n    i = 0; // failsafe\n    let turns = [];\n    while (turns.length < newMaxTurns && i++ < 100) {\n      let button = new_buttons[~~(new_buttons.length * Math.random())];\n\n      // can we use this button with the 'current result' ?\n      let possible = button.possible(x);\n\n      // if we can't take the action, don't use button\n      if (!possible) continue;\n\n      turns = [...turns, button];\n\n      x = button.getNextResult(x) \n      console.log('x', x)\n    }\n    setTargetResult(x)  \n\n    // store the turns that were taken to get to the result (cheat mode)\n    setTakenTurns(turns);\n\n    setGameState(\"ready\");\n  };\n  return (\n    <GameContext.Provider\n      value={{\n        limitButtons,\n        setLimitButtons,  \n        haveTurn,\n        gameState,\n        setGameState,\n        currentResult,\n        setCurrentResult,\n        targetResult,\n        setTargetResult,\n        buttons,\n        setButtons,\n        takenTurns,\n        setTakenTurns,\n        currentTurns,\n        setCurrentTurns,\n        resetGame,\n        maxTurns,\n        setMaxTurns,\n        startValue,\n        setStartValue,\n        limitTurns,\n        setLimitTurns,\n        initialiseGame\n      }}\n    >\n      {\" \"}\n      <GameBoard />\n    </GameContext.Provider>\n  );\n};\n\nexport default GameBoardContainer;\n"]},"metadata":{},"sourceType":"module"}